#!/usr/bin/env ruby -wKU

if ARGV.length < 1
  puts "usage: ruby extractor.rb '<config name>' '<stage>'"
  exit
end

require 'rubygems'
require 'hpricot'
require 'pp'
require 'date'
require 'mysql'
require 'htmlentities'
require 'json/pure'
require 'logger'

# CONFIG
@db_host = 'localhost'
@db_username = 'root'
@db_password = 'tweettweet'
@db_schema = 'sporq_menulinks'
@user_agent = 'sporqbot v0.1'

db = Mysql.new @db_host, @db_username, @db_password, @db_schema 
@log = Logger.new('logs/extractor.log')

class NilClass
  def to_sql
    'NULL'
  end
end

class String
  def to_sql
    self.empty? ? 'NULL' : ("'" + self.gsub('\'','\'\'') + "'")
  end
end

def get_page(url)
  sleep(180 + rand(60))
  `curl -L -A '#{@user_agent}' '#{url}' 2>/dev/null`
end

def extract_data(page)
  doc = Hpricot(page)
  name = doc.search("//div[@id='restaurant-info']//h2").inner_text.rstrip
  website = doc.search("//dl[@class='website']//a").first
  website = website.nil? ? nil : website.attributes['href'].rstrip
  address = doc.search("//span[@class='addr street-address']").inner_text.rstrip
  city = doc.search("//span[@class='city-zip']/span[@class='locality']").inner_text.rstrip
  state = doc.search("//span[@class='city-zip']/span[@class='region hide-microformat']").inner_text.rstrip
  phone = doc.search("//li[@class='phone']//strong").inner_text.rstrip
  phone = phone.gsub(/\D/, '')
  menu_link = doc.search("//li[@id='menu-tab']//a").first
  menu_link = menu_link.nil? ? nil : menu_link.attributes['href'].rstrip
  price = doc.search("//acronym[@class='price-key pricerange']").inner_text.rstrip
  hours = doc.search("//dl[@class='hours']/dd/span").inner_text.rstrip
  notes = doc.search("//dl[@class='notes']/dd/span").map { |x| x.inner_text.rstrip }
  features = doc.search("//dl[@class='features']/dd").inner_text.split(',').map { |x| x.gsub(/(^[\r\t\s]+|[\r\t\s]+$)/,'') }

  h = {
    "name" => name,
    "website" => website,
    "address" => address,
    "city" => city,
    "state" => state,
    "phone" => phone,
    "menu_link" => menu_link,
    "price" => price,
    "hours" => hours,
    "notes" => notes,
    "features" => features	}
end

#start
required = ['name', 'website', 'city', 'phone', 'state', 'address', 'menu_link']
begin
  begin
    lf = db.query("select * from link_finder where status='new' and site='menupages' limit 1;").fetch_row
    unless lf.nil?
      d = {}
      misc = {}
      id, status, link, lf_misc = lf
      page = get_page(link)
      h = extract_data(page)
      h.each do |k,v| 
        if required.include? k
          d[k] = v.to_sql
        else
	  misc[k] = v
        end
      end
      misc_str = misc.to_json.to_sql
  
      query = "INSERT INTO restaurant_data (name, website, city, phone, state, address, menu_link, misc) values " + 
	      "(#{d['name']}, #{d['website']}, #{d['city']}, #{d['phone']}, #{d['state']}, #{d['address']}, #{d['menu_link']}, #{misc_str});"
      db.query(query) unless h['menu_link'].nil?
      db.query "update link_finder set status='complete' where id=#{id};"
      @log.info query
    end
    #exit
  end while !lf.nil?
rescue Exception => e
  @log.error e
end
db.close
